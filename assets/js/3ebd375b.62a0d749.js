"use strict";(self.webpackChunktarant_page=self.webpackChunktarant_page||[]).push([[4261],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,d=u["".concat(i,".").concat(h)]||u[h]||m[h]||r;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:2},s="Create An Actor",l={unversionedId:"How Tos/how-to-create-an-actor",id:"How Tos/how-to-create-an-actor",title:"Create An Actor",description:"Actors represent the main unit of logic in the Actor Model. They are transactional, asynchronous and safe. When you work",source:"@site/docs/How Tos/how-to-create-an-actor.md",sourceDirName:"How Tos",slug:"/How Tos/how-to-create-an-actor",permalink:"/docs/How Tos/how-to-create-an-actor",draft:!1,editUrl:"https://github.com/tarantx/tarant-page/tree/main/docs/How Tos/how-to-create-an-actor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create An Actor System",permalink:"/docs/How Tos/how-to-create-an-actor-system"},next:{title:"Create A Function Actor",permalink:"/docs/How Tos/how-to-create-a-function-actor"}},i={},c=[{value:"Actors with initial state",id:"actors-with-initial-state",level:2},{value:"How calling an Actor works",id:"how-calling-an-actor-works",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-an-actor"},"Create An Actor"),(0,o.kt)("p",null,"Actors represent the main unit of logic in the Actor Model. They are transactional, asynchronous and safe. When you work\nwith actors, you have the following guarantees:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"A single actor will process a single message at a time"),". For example, if you call a method in an actor two times, you\nwill not process those calls in parallel, but sequentially."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"A single actor will process messages in order"),". For example, if you call two different methods in an actor, messages\nwill be processed in the calling order."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Actor failures are isolated"),". If an actor fails because there is a requirement that is not fulfilled (like not\nhaving network connection), the exception will not propagate to all actors, but will be managed by the actor supervisor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Slow actors will not block other actors"),". If an actor is waiting for a response of a server, or from another actor,\nit will not block other actors, that will be still processing messages.")),(0,o.kt)("p",null,"The process of creating an actor is quite transparent, and a simple task. Actor types are represented with a protocol\nthey understand. A protocol is a set of messages that an actor can actually handle."),(0,o.kt)("p",null,"For example, if we have the following protocol:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ping()\n")),(0,o.kt)("p",null,"It means that the actor will only understand the message ",(0,o.kt)("inlineCode",{parentName:"p"},"ping")," without parameters."),(0,o.kt)("p",null,"With the following protocol:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"sayHi(whom)\nsayBye(whom)\n")),(0,o.kt)("p",null,"It means that the actor can handle both messages, ",(0,o.kt)("inlineCode",{parentName:"p"},"sayHi")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sayBye")," with a single parameter."),(0,o.kt)("p",null,"To define an Actor protocol, we just need to create a ES6 class that extends Actor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { Actor } = require('tarant')\n\nclass Person extends Actor {\n  sayHi(whom) {\n    console.log('Hi', whom)\n  }\n\n  sayBye(whom) {\n    console.log('Bye', whom)\n  }\n}\n")),(0,o.kt)("p",null,"This Actor type Person will handle two messages with the specified logic (just printing something into the console). To\ninstantiate an actor, ","[we need a running actor system]","(/docs/how tos/how-to-create-an-actor-system). We are going to create an\nActor System with the default configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { ActorSystem } = require('tarant')\n\nconst system = ActorSystem.default()\n")),(0,o.kt)("p",null,"And to instantiate an actor, we need to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"actorOf")," method with the Actor protocol that we want to use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const dante = system.actorOf(Person)\n")),(0,o.kt)("p",null,"And you can call any method of the actor directly, like any other class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"dante.sayHi('Martin')\n")),(0,o.kt)("h2",{id:"actors-with-initial-state"},"Actors with initial state"),(0,o.kt)("p",null,"It's common that an actor needs some initial state to work, for example, in our case, we need the person name. Actors can\nreceive any initial state on the constructor, and this state can be passed through ",(0,o.kt)("inlineCode",{parentName:"p"},"actorOf"),". For example, let's extend\nour ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," protocol to allow having a name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class Person extends Actor {\n  constructor(name) {\n    super()\n\n    this.name = name\n  }\n\n  sayHi(whom) {\n    console.log(this.name, ': Hi', whom)\n  }\n\n  sayBye(whom) {\n    console.log(this.name, ': Bye', whom)\n  }\n}\n")),(0,o.kt)("p",null,"When defining the constructor of an Actor, there are two things to consider:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"You need to call the super() constructor"),". This is a JavaScript rule and it won't work if we don't do it the first\nthing in your newly created constructor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"super() has a parameter ",(0,o.kt)("inlineCode",{parentName:"strong"},"id")," that is the ID of the actor"),". Actors are uniquely identified by an ID that you can\npass through the super constructor (as in ",(0,o.kt)("inlineCode",{parentName:"li"},"super(theIdIWant)"),"). If we don't specify any ID, tarant will create a random\nUUID for it.")),(0,o.kt)("p",null,"Now that we have our new redefined protocol, we can create a new actor with a name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const dante = system.actorOf(Person, ['Dante'])\n")),(0,o.kt)("p",null,"Now, calling the sayHi method like in the previous example, will show:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"> Dante : Hi Martin\n")),(0,o.kt)("h2",{id:"how-calling-an-actor-works"},"How calling an Actor works"),(0,o.kt)("p",null,"It's important to note that calling an actor method is not a synchronous operation. It's completely asynchronous and they\nalways return promises. When you call a method on an actor, the actor will add a new message to it's mailbox, and will be\nprocessing messages in the mailbox until it's empty."),(0,o.kt)("p",null,"You can find more information of the architecture in ",(0,o.kt)("a",{parentName:"p",href:"/docs/components/actor-system"},"the components page"),"."))}m.isMDXComponent=!0}}]);