<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Tarant Blog</title>
        <link>https://www.tarant.dev/blog</link>
        <description>Tarant Blog</description>
        <lastBuildDate>Sat, 22 Apr 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Tarant Cloud: Private Beta Is Ready]]></title>
            <link>https://www.tarant.dev/blog/2023/04/22/private-beta-is-ready</link>
            <guid>https://www.tarant.dev/blog/2023/04/22/private-beta-is-ready</guid>
            <pubDate>Sat, 22 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Private beta is ready for requests]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Private Beta is ready!" src="/assets/images/tarant-cloud-beta-ready-6cbe91aea49f0eba152f36e673236ba6.png" width="1916" height="1080" class="img_ev3q"></p><p>We are happy to announce that, after <strong>a long</strong> and <strong>huge effort</strong> the tarant cloud private beta is ready. We, the maintainers of tarant,
believe that software architecture and design can be simpler and more effective, and <a href="/blog/2023/04/17/why-the-cloud">we mentioned a few caveats of the current status quo</a>. </p><p>This private beta is a way to gather feedback on how infrastructure should look like, and a way collaborate with the community on how to make things
worth the effort. We want an open approach to design the platform, as the tarant cloud should be a townhall and marketplace of developers willing
to share their knowledge, ideas, and tools and get benefit from that.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-the-private-beta-offer">What does the private Beta offer?<a href="#what-does-the-private-beta-offer" class="hash-link" aria-label="Direct link to What does the private Beta offer?" title="Direct link to What does the private Beta offer?">​</a></h3><p>The private beta offer free infrastructure to deploy in production your tarant applications. You will be using the <a href="/">tarant</a> library and the
<strong>txc</strong> CLI to deploy your application.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-much-does-the-private-beta-cost">How much does the private Beta cost?<a href="#how-much-does-the-private-beta-cost" class="hash-link" aria-label="Direct link to How much does the private Beta cost?" title="Direct link to How much does the private Beta cost?">​</a></h3><p>The private beta is completely free. No payment method required.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-i-join-the-private-beta">How do I join the private Beta?<a href="#how-do-i-join-the-private-beta" class="hash-link" aria-label="Direct link to How do I join the private Beta?" title="Direct link to How do I join the private Beta?">​</a></h3><p>You can click in the following button:</p><button class="button button--secondary button--lg heroButton_GTT_" style="margin-bottom:1em">Join The Cloud Beta</button><p>That will pop up a form with basic information so we can contact you to give you access to the beta. The information we need is:</p><ul><li>Your <strong>name</strong>, so we know how to call you. We don't need any official name, it can be any name you identify with.</li><li>Your <strong>email</strong>, so we know where to contact you. The email will be <strong>used only</strong> for information about the beta, and nothing else.</li><li><strong>Company you work for</strong>. This information is helpful for us so we know how companies are using tarant and how they would like to use the cloud.</li></ul><p>You can add any additional comments and requests and we will read them. If you are interested how the beta works, feel free to take a look at our
<!-- -->[tutorial on how to deploy your first cloud application]<!-- -->(docs/Quick Start/your-first-cloud-application).</p>]]></content:encoded>
            <category>cloud</category>
            <category>product</category>
            <category>beta</category>
        </item>
        <item>
            <title><![CDATA[Tarant Cloud: Talk, Collaborate and Solve]]></title>
            <link>https://www.tarant.dev/blog/2023/04/17/why-the-cloud</link>
            <guid>https://www.tarant.dev/blog/2023/04/17/why-the-cloud</guid>
            <pubDate>Mon, 17 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[An approach for a common abstraction level]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="An approach for a common abstraction level" src="/assets/images/why-tarant-post-title-e1c98fab6dcb89ff8ad7d4ab5617aa45.png" width="1918" height="1080" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-current-scenario">The current scenario<a href="#the-current-scenario" class="hash-link" aria-label="Direct link to The current scenario" title="Direct link to The current scenario">​</a></h2><p>Working on software based solutions is a complex task that requires the effort of a cohort of very different roles that interact together to design, build,
test, deploy and monitor the product. Complexity grows with requirements, given more features, less reliable is to build on top of that software and
becomes problematic. The community worked on different solutions for all the set of problems that we, as software developers, need to solve to put our
software, working, in production.</p><p>These solutions span lots of different aspects of the essential complexity of our work:</p><ul><li>We have frameworks that help us design a solution abstracting ourselves from the complexities of the underlying platform.</li><li>We testing libraries that allows us to verify our applications to ensure correctness.</li><li>We have tools that allows us to monitor our applications in production.</li><li>We have toolkits that allows us to deploy our infrastructure in a scalable way.</li></ul><p>And there are many other cross-cutting concerns, like security, performance, accessibility, and so on.</p><p>We as an industry, are having a bad time handling all this complexity properly, as we are still young and growing extremely fast. With growth, comes also additional
problems, like sociotechnical challenges, resource management, financial operations and a wide list of others that could be included here.</p><p>For this post, we are going to talk about production complexity and billing.</p><p>Both <a href="https://github.com/kanekotic" target="_blank" rel="noopener noreferrer">@kanekotic</a> and <a href="https://github.com/kmruiz" target="_blank" rel="noopener noreferrer">myself</a> are software developers, leading teams of different sizes and diversities,
with different problems, building software.  We are still doing this from different aspects of the delivery timeline of a project.
This allows us to understand the software industry from a wider level and to understand where and how we are struggling.</p><p>Digging on the feedback we've gathered, we've found the following list of challenges that are common and hardly resolved:</p><ul><li>How do we ensure the scalability of our system within a reasonable cost?</li><li>How do we ensure the evolution of our system to the requirements within a reasonable timeframe?</li><li>How do we simplify the overall architecture while increasing the capacity of adaptation?</li><li>How do we ensure that the application is behaving correctly in production and that we detect when it doesn't?</li></ul><p>Let me give an example of all these cases:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-ensure-the-scalability-of-our-system-within-a-reasonable-cost">How do we ensure the scalability of our system within a reasonable cost?<a href="#how-do-we-ensure-the-scalability-of-our-system-within-a-reasonable-cost" class="hash-link" aria-label="Direct link to How do we ensure the scalability of our system within a reasonable cost?" title="Direct link to How do we ensure the scalability of our system within a reasonable cost?">​</a></h3><p>System scalability is a complex topic, as it depends on usage patterns of customers. Essentially, and ideally, you want to scale down your application and
dependencies when there is less load in your systems, reducing costs, but you want to increase the capacity of your system moments before the load increases,
so you can handle transparently with the minimum amount of cost increase, your workload.</p><p>However, there are a few challenges here:</p><ul><li>How do we know when to scale up and down?</li><li>How much does it cost to scale up and down?</li><li>What do we scale up and down and how?</li></ul><p>Some of these challenges are tackled by the <strong>serverless model</strong>, with a pay per consumption model, with scale-to-zero capabilities. Let's take an example on how
<a href="https://aws.amazon.com/lambda/" target="_blank" rel="noopener noreferrer">AWS Lambda</a> handles it, as it's of the main leaders in serverless computing.</p><ul><li>To use an AWS Lambda, you just need to upload a .zip to Lambda, and AWS takes care of everything.</li><li>You have to choose CPU and Memory, this affects how the Lambda is billed. Essentially, Lambda would choose the suitable amount of CPU based on the memory allocated, but it's common to overprovision memory for more CPU power.</li><li>Lambdas are billed every 100ms, so a function that takes a few ms is billed for 100ms.</li><li>Lambdas also suffer <code>cold starts</code>, what essentialy means that scalability is affected under some runtimes.</li></ul><p>Lambdas are a wonderful tool, but they are also problematic for billing provisioning. How much is a lambda going to cost overall per month? It's extremely hard
to measure properly. There are some calculators, like the one from <a href="https://dashbird.io/lambda-cost-calculator/" target="_blank" rel="noopener noreferrer">dashbird</a> that does some simple calculations but
it's often not reliable enough because the Lambda billing model is extremely complex.</p><p>There are other solutions, of course, like VM reservation, using Kubernetes or something like Fargate, to simplify billing, but they have other types of challenges,
like how many VMs should we reserved, what size, and how to ensure workload is distributed evenly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-ensure-the-evolution-of-our-system-to-the-requirements-within-a-reasonable-timeframe">How do we ensure the evolution of our system to the requirements within a reasonable timeframe?<a href="#how-do-we-ensure-the-evolution-of-our-system-to-the-requirements-within-a-reasonable-timeframe" class="hash-link" aria-label="Direct link to How do we ensure the evolution of our system to the requirements within a reasonable timeframe?" title="Direct link to How do we ensure the evolution of our system to the requirements within a reasonable timeframe?">​</a></h3><p>Software that is useful changes. With these changes, comes technical debt, and an increase amount of complexity. This complexity likely increases with
accidential decisions that weren't aware of the future of the software itself. It is common to patch forward features into the current design until
the software development process becomes a bottleneck.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-simplify-the-overall-architecture-while-increasing-the-capacity-of-adaptation">How do we simplify the overall architecture while increasing the capacity of adaptation?<a href="#how-do-we-simplify-the-overall-architecture-while-increasing-the-capacity-of-adaptation" class="hash-link" aria-label="Direct link to How do we simplify the overall architecture while increasing the capacity of adaptation?" title="Direct link to How do we simplify the overall architecture while increasing the capacity of adaptation?">​</a></h3><p>The actor model tries to solve these issues by simplifying the overall architecture of software. Instead of complex patterns and layered softwares that
fail to handle concurrency, transactionality and reduced performance, we just have a set of long living objects that interact between them in an ordered
manner. Also, tarant has other properties, like <code>actor universality</code> where an actor can run transparently both in a client application and a server.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-ensure-that-the-application-is-behaving-correctly-in-production-and-that-we-detect-when-it-doesnt">How do we ensure that the application is behaving correctly in production and that we detect when it doesn't?<a href="#how-do-we-ensure-that-the-application-is-behaving-correctly-in-production-and-that-we-detect-when-it-doesnt" class="hash-link" aria-label="Direct link to How do we ensure that the application is behaving correctly in production and that we detect when it doesn't?" title="Direct link to How do we ensure that the application is behaving correctly in production and that we detect when it doesn't?">​</a></h3><p>Here raises the complexity, as developers need to monitor their software in production, but there is a language gap between how we monitor systems and how we build
them. It's not uncommon finding developers uncomfortable understanding how to scale their system based on CPU or memory usage. Nowadays, for lots
of systems, disk usage has been delegated to databases, but CPU, Memory, Network, Locks... are still relevant for production-level applications.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-see-the-future-of-computing-in-tarant">How do we see the future of computing in tarant?<a href="#how-do-we-see-the-future-of-computing-in-tarant" class="hash-link" aria-label="Direct link to How do we see the future of computing in tarant?" title="Direct link to How do we see the future of computing in tarant?">​</a></h2><p>We want teams to talk, communicate and solve in a common abstraction level. For us, complexity lies in jumping across different levels of abstractions during
the design, development and delivery process. Information is lost during this long jumps, requirements become unclear across teams and tight deadlines forces
teams to focus on high-visibility low-value work, delivering uncomplete features, without security best practices, on top of expensive infrastructure.</p><p>We are sure that using the actor model, and specific conventions and best practices on top of that, can raise the bar. By increasing the abstraction level, we can
assume optimisations, simplify the development model and improve how monitoring and observability works. To this, to work, means that we are not developing
anything generic, but will built on top of tarant and for tarant.</p><p>Our principles are:</p><ul><li>No additional concepts: all features are tarant based and using already known tarant concepts.<ul><li>Only think about actors, topics, messages and systems.</li></ul></li><li>Secure by default<ul><li>Secure options <strong>must</strong> be easier, or as easy as insecure ones.</li></ul></li><li>Simplicity by design<ul><li>Design your application, we build your infrastructure on top of that.</li></ul></li><li>No surprises<ul><li>Scale up and down without a surprise on your bill.</li></ul></li></ul><p>We have lots of ideas, we have lots of opportunities, and we want to build together. We are developing a closed beta that is already accepting requests to test
the cloud. We will be giving access incrementally, <em>totally free</em> to the initial, limited version of the cloud.
If you want to know more about tarant, <a href="https://www.tarant.dev/docs/category/quick-start" target="_blank" rel="noopener noreferrer">check our tutorials</a>.
If you want to join the beta, check <a href="/">our home page, as we have a contact form in there</a>.
No private information is shared with anyone, and the only communications we will share are strictly related to the beta itself.
If you are interested on talking with us directly, we have a <a href="https://app.gitter.im/#/room/#tarantx_general" target="_blank" rel="noopener noreferrer">gitter room</a>.</p>]]></content:encoded>
            <category>cloud</category>
            <category>product</category>
        </item>
        <item>
            <title><![CDATA[Website Revamp]]></title>
            <link>https://www.tarant.dev/blog/2023/03/12/website-revamp</link>
            <guid>https://www.tarant.dev/blog/2023/03/12/website-revamp</guid>
            <pubDate>Sun, 12 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[we have a new version of our website and documentation]]></description>
            <content:encoded><![CDATA[<p>Hello welcome everyone to the first blog post of the revamped website.</p>]]></content:encoded>
            <category>website</category>
            <category>product</category>
        </item>
    </channel>
</rss>